#!/usr/bin/env python3
"""
Bot Telegram para Envio Automatizado de Mensagens
Sistema completo com autentica√ß√£o, backup, relat√≥rios e interface multil√≠ngue

Funcionalidades:
- Autentica√ß√£o por senha
- Upload de planilhas (CSV/XLSX)
- Configura√ß√£o de intervalos e lotes
- Envio automatizado com notifica√ß√µes
- Sistema de backup e recupera√ß√£o
- Tratamento de erros com skip autom√°tico
- Relat√≥rios detalhados
- Interface multil√≠ngue (PT-BR, EN-US, ZH-CN)
- Navega√ß√£o fluida com bot√µes interativos
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, filters
)

from config import BOT_TOKEN
from handlers import BotHandlers

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def main():
    """Fun√ß√£o principal do bot"""
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN n√£o configurado! Verifique o arquivo .env")
        return
    
    # Criar aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Registrar handlers
    application.add_handler(CommandHandler("start", BotHandlers.start_command))
    application.add_handler(CommandHandler("help", BotHandlers.start_command))
    application.add_handler(CommandHandler("menu", BotHandlers.start_command))
    application.add_handler(CommandHandler("language", BotHandlers.language_command))
    
    # Handler para mensagens de texto
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        BotHandlers.handle_message
    ))
    
    # Handler para documentos (planilhas)
    application.add_handler(MessageHandler(
        filters.Document.ALL,
        BotHandlers.handle_document
    ))
    
    # Handler para bot√µes inline
    application.add_handler(CallbackQueryHandler(BotHandlers.handle_callback_query))
    
    # Iniciar bot
    logger.info("üöÄ Bot iniciado com sucesso!")
    logger.info("üìã Funcionalidades ativas:")
    logger.info("   ‚úÖ Autentica√ß√£o por senha")
    logger.info("   ‚úÖ Upload de planilhas CSV/XLSX")
    logger.info("   ‚úÖ Sistema de backup autom√°tico")
    logger.info("   ‚úÖ Envio com notifica√ß√µes em tempo real")
    logger.info("   ‚úÖ Tratamento de erros com skip")
    logger.info("   ‚úÖ Interface multil√≠ngue (PT/EN/ZH)")
    logger.info("   ‚úÖ Relat√≥rios detalhados")
    logger.info("   ‚úÖ Navega√ß√£o com bot√µes interativos")
    
    # Executar bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro fatal: {e}")
        raise