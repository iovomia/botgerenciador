#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do Bot Telegram
Automatiza a configura√ß√£o inicial do sistema
"""

import os
import sys
import subprocess
from pathlib import Path

def print_banner():
    """Exibe banner do sistema"""
    print("=" * 60)
    print("ü§ñ BOT TELEGRAM - SISTEMA DE ENVIO AUTOMATIZADO")
    print("=" * 60)
    print("üìã Instala√ß√£o e Configura√ß√£o Autom√°tica")
    print("=" * 60)

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")
    return True

def install_dependencies():
    """Instala depend√™ncias"""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias!")
        return False

def create_env_file():
    """Cria arquivo .env com configura√ß√µes"""
    print("\n‚öôÔ∏è Configurando arquivo .env...")
    
    if os.path.exists('.env'):
        response = input("üìÑ Arquivo .env j√° existe. Sobrescrever? (s/N): ")
        if response.lower() != 's':
            print("‚è≠Ô∏è Mantendo configura√ß√£o existente")
            return True
    
    print("\nüîß Configura√ß√£o do Bot:")
    bot_token = input("üîë Token do Bot Telegram: ").strip()
    
    if not bot_token:
        print("‚ùå Token √© obrigat√≥rio!")
        return False
    
    password = input("üîê Senha do sistema (padr√£o: kangoo@#2019): ").strip()
    if not password:
        password = "kangoo@#2019"
    
    admin_id = input("üë§ ID do administrador (opcional): ").strip()
    
    # Criar arquivo .env
    env_content = f"""# Bot Token do Telegram
BOT_TOKEN={bot_token}

# Senha de acesso ao sistema
SYSTEM_PASSWORD={password}

# ID do usu√°rio administrador (opcional)
ADMIN_USER_ID={admin_id}
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Arquivo .env criado com sucesso!")
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = ['reports', 'logs']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio '{directory}' criado")
    
    return True

def test_configuration():
    """Testa configura√ß√£o b√°sica"""
    print("\nüß™ Testando configura√ß√£o...")
    
    try:
        # Testar imports
        from config import BOT_TOKEN
        from utils import BackupManager
        from translations import get_text
        
        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN n√£o configurado!")
            return False
        
        print("‚úÖ Configura√ß√£o b√°sica OK")
        print("‚úÖ Imports funcionando")
        print("‚úÖ Sistema pronto para uso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def show_usage_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "=" * 60)
    print("üöÄ INSTALA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("\nüìã Como usar:")
    print("1. Execute: python main.py")
    print("2. Envie /start para o bot no Telegram")
    print("3. Digite a senha configurada")
    print("4. Envie sua planilha (.csv ou .xlsx)")
    print("5. Configure intervalo e quantidade por ciclo")
    print("6. Inicie o envio!")
    
    print("\nüîß Comandos dispon√≠veis:")
    print("‚Ä¢ /start - Iniciar bot")
    print("‚Ä¢ /language - Mudar idioma")
    print("‚Ä¢ /help - Ajuda")
    print("‚Ä¢ /menu - Voltar ao menu")
    
    print("\nüìä Formato da planilha:")
    print("Colunas obrigat√≥rias: api_key, chat_id, mensagem")
    
    print("\nüåç Idiomas suportados:")
    print("‚Ä¢ Portugu√™s (PT-BR)")
    print("‚Ä¢ English (EN-US)")
    print("‚Ä¢ ‰∏≠Êñá (ZH-CN)")
    
    print("\nüìÅ Arquivos importantes:")
    print("‚Ä¢ backup.json - Backup autom√°tico")
    print("‚Ä¢ reports/ - Relat√≥rios de envio")
    print("‚Ä¢ bot.log - Logs do sistema")
    
    print("\n" + "=" * 60)

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print_banner()
    
    # Verificar Python
    if not check_python_version():
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        return False
    
    # Criar arquivo .env
    if not create_env_file():
        return False
    
    # Criar diret√≥rios
    if not create_directories():
        return False
    
    # Testar configura√ß√£o
    if not test_configuration():
        return False
    
    # Mostrar instru√ß√µes
    show_usage_instructions()
    
    return True

if __name__ == '__main__':
    try:
        success = main()
        if success:
            print("\nüéâ Instala√ß√£o conclu√≠da com sucesso!")
            print("Execute 'python main.py' para iniciar o bot")
        else:
            print("\n‚ùå Instala√ß√£o falhou!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)